@use 'sass:list';
@use 'sass:map';

@use '../core' as *;
@use './variables' as *;

// Проверяет существует ли набор цветов для темы $theme
@function assertColorsTheme($theme) {
	@if map.has-key($colorsThemes, $theme) {
		@return true;
	} @else {
		@error 'Unknown colors theme "#{$theme}".';
	}
}

// Возвращает цвет в соответствии с активной темой либо $default
@function themeColor($color) {
	@if map.get($colorsThemes, $color) == null {
		@return map.get($colorsThemes, error01);
		//@return white;
	} @else {
		@return map.get($colorsThemes, $color)
	}
}

// Возвращает селектор корневого элемента с темой
@function colorsThemeSelector($theme, $mod: null) {
	@if assertColorsTheme($theme) {
		$res: '[data-css-colors=#{$theme}]';
		@if $mod != null {
			$res: ':#{$mod}(#{$res})';
		}
		@return rootSelector($res);
	}
}

// Применяет стили к селектору корневого элемента с темой
@mixin withColorsTheme($theme, $mod: null) {
	@if assertColorsTheme($theme) {
		#{colorsThemeSelector($theme, $mod)} & {
			@content;
		}
	}
}

// Создает css переменные со значениями под активную тему
@mixin cssColorVars($vars, $prefix: '') {
	@each $name, $value in $vars {
		#{cssVarName('#{$prefix}#{$name}')}: #{themeColor($value)};
	}
}
